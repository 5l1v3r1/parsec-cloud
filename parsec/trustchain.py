import pendulum
from typing import Tuple

from parsec.types import DeviceID, UserID
from parsec.schema import UnknownCheckedSchema, fields
from parsec.crypto import (
    VerifyKey,
    PublicKey,
    sign_and_add_meta,
    verify_signature_from,
    unsecure_extract_msg_from_signed,
    decode_signedmeta,
)


ROOT_DEVICE_ID = DeviceID("root@root")

# TODO: configurable ?
MAX_TS_BALLPARK = 30 * 60


def timestamps_in_the_ballpark(ts1: pendulum.Pendulum, ts2: pendulum.Pendulum):
    """
    Useful to compare timestamp provided inside the certified payload and
    the one generated by the backend when it received the certified payload.
    """
    return abs((ts1 - ts2).total_seconds()) < MAX_TS_BALLPARK


class CertifiedDeviceSchema(UnknownCheckedSchema):
    type = fields.CheckedConstant("device", required=True)
    timestamp = fields.DateTime(required=True)
    device_id = fields.DeviceID(required=True)
    verify_key = fields.VerifyKey(required=True)


class CertifiedUserSchema(UnknownCheckedSchema):
    type = fields.CheckedConstant("user", required=True)
    timestamp = fields.DateTime(required=True)
    user_id = fields.UserID(required=True)
    public_key = fields.PublicKey(required=True)


class CertifiedUserInvitationSchema(UnknownCheckedSchema):
    type = fields.CheckedConstant("user_invitation", required=True)
    timestamp = fields.DateTime(required=True)
    user_id = fields.UserID(required=True)


class CertifiedUserRevocationSchema(UnknownCheckedSchema):
    type = fields.CheckedConstant("user_revocation", required=True)
    timestamp = fields.DateTime(required=True)
    user_id = fields.UserID(required=True)


class CertifiedDeviceInvitationSchema(UnknownCheckedSchema):
    type = fields.CheckedConstant("device_invitation", required=True)
    timestamp = fields.DateTime(required=True)
    device_id = fields.DeviceID(required=True)


class CertifiedDeviceRevocationSchema(UnknownCheckedSchema):
    type = fields.CheckedConstant("device_revocation", required=True)
    timestamp = fields.DateTime(required=True)
    device_id = fields.DeviceID(required=True)


certified_device_schema = CertifiedDeviceSchema(strict=True)
certified_user_schema = CertifiedUserSchema(strict=True)
certified_user_invitation_schema = CertifiedUserInvitationSchema(strict=True)
certified_user_revocation_schema = CertifiedUserRevocationSchema(strict=True)
certified_device_invitation_schema = CertifiedDeviceInvitationSchema(strict=True)
certified_device_revocation_schema = CertifiedDeviceRevocationSchema(strict=True)


def certify_device(
    certifier_id: DeviceID, certifier_key: VerifyKey, device_id: DeviceID, verify_key: VerifyKey
):
    payload = certified_device_schema.dumps(
        {
            "type": "device",
            "timestamp": pendulum.now(),
            "device_id": device_id,
            "verify_key": verify_key,
        }
    )[0].encode("utf8")
    return sign_and_add_meta(certifier_id, certifier_key, payload)


def validate_certified_device(certifier_key: VerifyKey, data: bytes):
    raw = verify_signature_from(certifier_key)
    return certified_device_schema.loads(raw.decode("utf8"))


def unsecure_certified_device_extract_verify_key(data: bytes):
    _, signed = decode_signedmeta(data)
    raw = unsecure_extract_msg_from_signed(signed)
    return certified_device_schema.loads(raw.decode("utf8"))[0]["verify_key"]


def certify_user(
    certifier_id: DeviceID, certifier_key: VerifyKey, user_id: UserID, public_key: PublicKey
):
    payload = certified_user_schema.dumps(
        {"type": "user", "timestamp": pendulum.now(), "user_id": user_id, "public_key": public_key}
    )[0].encode("utf8")
    return sign_and_add_meta(certifier_id, certifier_key, payload)


def validate_certified_user(certifier_key: VerifyKey, data: bytes):
    raw = verify_signature_from(certifier_key)
    return certified_user_schema.loads(raw.decode("utf8"))


def unsecure_certified_user_extract_public_key(data: bytes):
    _, signed = decode_signedmeta(data)
    raw = unsecure_extract_msg_from_signed(signed)
    return certified_user_schema.loads(raw.decode("utf8"))[0]["public_key"]


def certify_user_invitation(
    certifier_id: DeviceID, certifier_key: VerifyKey, invited_user_id: UserID
):
    payload = certified_user_invitation_schema.dumps(
        {"type": "user_invitation", "timestamp": pendulum.now(), "user_id": invited_user_id}
    )[0].encode("utf8")
    return sign_and_add_meta(certifier_id, certifier_key, payload)


def validate_certified_user_invitation(certifier_key: VerifyKey, data: bytes):
    raw = verify_signature_from(certifier_key)
    return certified_user_invitation_schema.loads(raw.decode("utf8"))


def certify_user_revocation(
    certifier_id: DeviceID, certifier_key: VerifyKey, revoke_user_id: UserID
):
    payload = certified_user_revocation_schema.dumps(
        {"type": "user_revocation", "timestamp": pendulum.now(), "user_id": revoke_user_id}
    )[0].encode("utf8")
    return sign_and_add_meta(certifier_id, certifier_key, payload)


def validate_certified_user_revocation(certifier_key: VerifyKey, data: bytes):
    raw = verify_signature_from(certifier_key)
    return certified_user_revocation_schema.loads(raw.decode("utf8"))


def certify_device_invitation(
    certifier_id: DeviceID, certifier_key: VerifyKey, invited_device_id: DeviceID
):
    payload = certified_device_invitation_schema.dumps(
        {"type": "device_invitation", "timestamp": pendulum.now(), "device_id": invited_device_id}
    )[0].encode("utf8")
    return sign_and_add_meta(certifier_id, certifier_key, payload)


def validate_certified_device_invitation(certifier_key: VerifyKey, data: bytes):
    raw = verify_signature_from(certifier_key)
    return certified_device_invitation_schema.loads(raw.decode("utf8"))


def certify_device_revocation(
    certifier_id: DeviceID, certifier_key: VerifyKey, revoked_device_id: DeviceID
):
    payload = certified_device_revocation_schema.dumps(
        {"type": "device_revocation", "timestamp": pendulum.now(), "device_id": revoked_device_id}
    )[0].encode("utf8")
    return sign_and_add_meta(certifier_id, certifier_key, payload)


def validate_certified_device_revocation(certifier_key: VerifyKey, data: bytes):
    raw = verify_signature_from(certifier_key)
    return certified_device_revocation_schema.loads(raw.decode("utf8"))


def certified_extract_parts(payload: bytes) -> Tuple[DeviceID, bytes]:
    return decode_signedmeta(payload)
